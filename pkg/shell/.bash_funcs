#!/bin/bash

# Search for [$1...$n] in files from $PWD
ff() {
  local IFS='|'
  grep \
    --exclude-dir=".git/" \
    --exclude-dir=".terraform" \
    --exclude-dir="node_modules/" \
    -rinE "$*" .
}

fff() {
  ff "$*" | cut -d ":" -f1 | sort | uniq
}

type whence >/dev/null 2>&1 || whence() { type "$@" | sed -e "s/.*is aliased to \`//" -e "s/'$//"; }

unquote() {
  read str
  sed -e 's/^"//' -e 's/"$//' <<<"$str"
}

gocover() {
  t="/tmp/gocover.$$.tmp"
  go test -coverprofile=${t} $@ &&
    go tool cover -html=${t} &&
    unlink ${t}
}

function hex_from_bin() {
  echo "obase=16; ibase=2; $1" | bc
}

# FIXME:
tmux_race() {
  session=${TMUX_SESSION:-"$(mktemp)"}
  tmux new-session -d -s ${session} \; split-window
  tmux set-window-option -g -t ${session} remain-on-exit on
  tmux respawn-pane -k -t "$session:0.0" bash $1
  tmux respawn-pane -k -t "$session:0.1" bash $2
}

backup_history() {
  cp "$HISTFILE" "$HISTFILE.$(date +%s)"
}

compress_history() {
  backup_history
  awk 'NR==FNR && !/^#/{lines[$0]=FNR;next} lines[$0]==FNR' \
    "$HISTFILE" "$HISTFILE" >"$HISTFILE.compressed" &&
    mv "$HISTFILE.compressed" "$HISTFILE"
}

commaify_end() {
  while read line; do
    if [[ $line =~ ^.*,$ ]]; then
      echo "$line"
    else
      echo "$line,"
    fi
  done
}

du_sort() {
  local output=$(du -hs ./* 2>/dev/null)
  for i in G M K; do
    echo "$output" | grep "[0-9]$i\b" | sort -rn
  done
}

go_pkgname_replace() {
  local -r old=$1
  local -r new=$2
  find . -type f -name '*.go' -exec \
    sed -i -e "s,$old,$new,g" {} \;
}

# src: https://serverfault.com/questions/1014882/is-there-any-way-of-viewing-in-aws-what-ips-in-a-subnet-have-been-allocated
function aws_subnet_usage() {
  local -r subnet_id=$1
  aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=$subnet_id |
    jq -r '.NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress' |
    sort
}

# src: https://github.com/andrew8088/dotfiles/commit/ee6f9109e0dcbca3e643530aa70f306888b1405e
function search-line() {
  rg $1 --line-number . |
    fzf --delimiter ':' --preview 'bat --color=always --highlight-line {2} {1}'
}

function copy-line() {
  local clipboard="xclip -i -sel -c"
  if command -v pbcopy; then
    clipboard=pbcopy
  fi
  search-line $1 |
    awk -F ':' '{print $3}' |
    sed 's/^\s+//' |
    $clipboard
}

function open-at-line() {
  vim $(search-line $1 | awk -F ':' '{print "+"$2" "$1}')
}
